# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""
import pandas as pd
import math
from scipy.stats import norm
import numpy as np
import matplotlib.pyplot as plt


file_path = 'C:/Options Project/Options_dataset.xlsx'
data = pd.read_excel(file_path)
'''print(data.head()) #to print values of read dataframe
    print(data.dtypes) #to print data types of each column
    print(data.isnull().sum()) #to gigure out total nulls
    print(data['Option Type (Call/Put)'].unique()) # to check if Call and put are the only unique values existing
    data = data.dropna(subset=['Strike Price', 'Stock Price', 'Time to Maturity', 'Volatility']) #to drop nulls
    data['Time to maturity'] = data['Time to maturity'].fillna(1) #to fill 1 if time to maturity is null
    data['Option Type'] = data['Option Type'].replace({'c':'call', 'p':'put'}) #self explanatory
    OR
    for index,row in data.iterrows():
        if row['Option Type']=='C':
            data.at[index,'Opion Type'='Call']
            #.at uses position, column name as arguments
    
    ''' 
def black_scholes (S,K,T,r,sigma,option_type):
    d1=(math.log(S/K) +(r + 0.5 * sigma**2)*T)/(sigma * math.sqrt(T))  
    d2 = d1 - sigma*math.sqrt(T)
    if option_type == 'Call':
        option_price = S * norm.cdf(d1) - K *math.exp(-r * T)*norm.cdf(d2)
    elif option_type == 'Put':
        option_price = K * math.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    return option_price

def option_greeks(S,K,T,r,sigma, option_type):
    d1=(math.log(S/K) +(r + 0.5 * sigma**2)*T)/(sigma * math.sqrt(T))  
    d2 = d1 - sigma*math.sqrt(T)
    # Delta (Call: N(d1), Put: N(d1) - 1)
    if option_type == 'Call':
        delta = norm.cdf(d1)
    elif option_type == 'Put':
        delta = norm.cdf(d1) - 1
    
    # Gamma (Same for both Call and Put)
    gamma = norm.pdf(d1) / (S * sigma * math.sqrt(T))
    
    # Theta (Call: formula for Call, Put: formula for Put)
    if option_type == 'Call':
        theta = (-S * norm.pdf(d1) * sigma) / (2 * math.sqrt(T)) - r * K * math.exp(-r * T) * norm.cdf(d2)
    elif option_type == 'Put':
        theta = (-S * norm.pdf(d1) * sigma) / (2 * math.sqrt(T)) + r * K * math.exp(-r * T) * norm.cdf(-d2)
    
    # Vega (Same for both Call and Put)
    vega = S * math.sqrt(T) * norm.pdf(d1)
    
    # Rho (Call: formula for Call, Put: formula for Put)
    if option_type == 'Call':
        rho = K * T * math.exp(-r * T) * norm.cdf(d2)
    elif option_type == 'Put':
        rho = -K * T * math.exp(-r * T) * norm.cdf(-d2)
    
    return delta, gamma, theta, vega, rho

def monte_carlo_simulation(S,K,T,r,sigma,option_type,num_simulations = 1000):
    payoffs = []
    for _ in range(num_simulations):
        Z= np.random.normal(0,1)
        ST = S * np.exp((r - 0.5 * sigma**2) * T + sigma * np.sqrt(T) * Z)
        
        # Calculate payoff for Call or Put
        if option_type == 'Call':
            payoff = max(ST - K, 0)
        elif option_type == 'Put':
            payoff = max(K - ST, 0)
        
        # Discount the payoff
        discounted_payoff = np.exp(-r * T) * payoff
        payoffs.append(discounted_payoff)
    option_price=np.mean(payoffs)
    return option_price
'''
def plot_option_prices(data):
    call_prices_bs = []
    put_prices_bs = []
    call_prices_mc = []
    put_prices_mc = []

    for _, row in data.iterrows():
        S = row['Stock Price']
        K = row['Strike Price']
        T = row['Time to Maturity (T)']
        r = row['Risk-Free Rate (r)']
        sigma = row['Volatility (sigma)']
        option_type = row['Option Type']

        call_price_bs = black_scholes(S, K, T, r, sigma, option_type='Call')
        put_price_bs = black_scholes(S, K, T, r, sigma, option_type='Put')
        
        call_price_mc = monte_carlo_simulation(S, K, T, r, sigma, option_type='Call')
        put_price_mc = monte_carlo_simulation(S, K, T, r, sigma, option_type='Put')
        
        call_prices_bs.append(call_price_bs)
        put_prices_bs.append(put_price_bs)
        call_prices_mc.append(call_price_mc)
        put_prices_mc.append(put_price_mc)

    # Plot
    labels = data['Option Type'].tolist()
    x = range(len(data))
    
    plt.figure(figsize=(10, 6))
    plt.bar(x, call_prices_bs, width=0.35, label="Black-Scholes Call", align='center', color='blue')
    plt.bar(x, put_prices_bs, width=0.35, label="Black-Scholes Put", align='edge', color='orange')
    plt.bar(x, call_prices_mc, width=0.35, label="Monte Carlo Call", align='center', color='green')
    plt.bar(x, put_prices_mc, width=0.35, label="Monte Carlo Put", align='edge', color='red')
    plt.xticks(x, labels)
    plt.ylabel('Option Price')
    plt.title('Option Prices (Black-Scholes vs Monte Carlo)')
    plt.legend()
    plt.show()

# Step 6: Plotting Stock Price Distribution (Monte Carlo Simulation)
def plot_stock_simulation(data):
    for _, row in data.iterrows():
        S = row['Stock Price']
        K = row['Strike Price']
        T = row['Time to Maturity (T)']
        r = row['Risk-Free Rate (r)']
        sigma = row['Volatility (sigma)']
        
        simulated_prices = []
        num_simulations = 10000
        
        for _ in range(num_simulations):
            Z = np.random.normal(0, 1)
            ST = S * np.exp((r - 0.5 * sigma**2) * T + sigma * np.sqrt(T) * Z)
            simulated_prices.append(ST)
        
        plt.figure(figsize=(10,6))
        plt.hist(simulated_prices, bins=50, color='green', alpha=0.7)
        plt.xlabel('Simulated Stock Prices at Maturity')
        plt.ylabel('Frequency')
        plt.title(f'Distribution of Simulated Stock Prices for S={S} (Monte Carlo)')
        plt.show()

# Step 7: Option Price vs Volatility
def plot_option_price_vs_volatility(data):
    for _, row in data.iterrows():
        S = row['Stock Price']
        K = row['Strike Price']
        T = row['Time to Maturity (T)']
        r = row['Risk-Free Rate (r)']
        
        volatilities = np.linspace(0.1, 1.0, 20)
        call_prices = []
        put_prices = []
        
        for sigma in volatilities:
            call_price = black_scholes(S, K, T, r, sigma, option_type='Call')
            put_price = black_scholes(S, K, T, r, sigma, option_type='Put')
            call_prices.append(call_price)
            put_prices.append(put_price)
        
        plt.figure(figsize=(10, 6))
        plt.plot(volatilities, call_prices, label="Call Option Price", color='blue')
        plt.plot(volatilities, put_prices, label="Put Option Price", color='red')
        plt.xlabel('Volatility')
        plt.ylabel('Option Price')
        plt.title(f'Option Price vs Volatility for S={S}, K={K}, T={T}, r={r}')
        plt.legend()
        plt.show()
'''
# Step 8: Process All Options from Excel and Calculate Results
def process_options(data):
    results = []
    
    for _, row in data.iterrows():
        S = row['Stock Price']
        K = row['Strike Price']
        T = row['Time to Maturity (T)']
        r = row['Risk-Free Rate (r)']
        sigma = row['Volatility (sigma)']
        option_type = row['Option Type']
        
        # Calculate Black-Scholes and Monte Carlo prices, Greeks
        call_price_bs = black_scholes(S, K, T, r, sigma, option_type='Call')
        put_price_bs = black_scholes(S, K, T, r, sigma, option_type='Put')
        
        call_price_mc = monte_carlo_simulation(S, K, T, r, sigma, option_type='Call')
        put_price_mc = monte_carlo_simulation(S, K, T, r, sigma, option_type='Put')
        
        # Calculate Greeks
        delta, gamma, theta, vega, rho = option_greeks(S, K, T, r, sigma, option_type)
        
        # Store results
        results.append({
            'Stock Price': S,
            'Strike Price': K,
            'Maturity Time': T,
            'Risk-Free Rate': r,
            'Volatility': sigma,
            'Option Type': option_type,
            'Call Price (BS)': call_price_bs,
            'Put Price (BS)': put_price_bs,
            'Call Price (MC)': call_price_mc,
            'Put Price (MC)': put_price_mc,
            'Delta': delta,
            'Gamma': gamma,
            'Theta': theta,
            'Vega': vega,
            'Rho': rho
        })
    
    # Convert results to DataFrame for better visualization
    results_df = pd.DataFrame(results)
    return results_df

# Final Results
processed_results = process_options(data)
processed_results.to_csv('C:/Options Project/Output.csv', index=False)

# Display Results
print(processed_results)

# Generate Plots
'''plot_option_prices(data)
plot_stock_simulation(data)
plot_option_price_vs_volatility(data)'''

